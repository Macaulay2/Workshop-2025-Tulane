

end--

restart
load "./rings-ideals-matrices.m2"

-----------
-- Rings --
-----------
-- basic fields/rings
kk = ZZ/32003
kk = QQ
kk = GF 8  
  kk_0
  a
  a^3 + a + 1
kk = toField(QQ[i]/(i^2+1))
  i^2
  i
kk = frac(ZZ[a,b,c])
  (a+b)/(c^2-1)
kk = ZZ   -- generally not what you want, as it isn't a field...

-- Polynomial rings
R = ZZ/101[a..d]
  R_0
  numgens R
S = ZZ/101[x_0..x_5]
  x_0
  x = 10
  use S
  x_0
  describe S
T = ZZ/101[a..d, Degrees => {1,3,6,7}]
  describe T

use R
V = R[a,b,c]
(x_0+x_1)*a + x_1*b + x_2*c
flattenRing V

-- Quotients of polynomial rings
use S
  U = S/(x_0^2-1, b^3-2)

-- Localizations
needsPackage "LocalRings"
viewHelp oo

-- reals and complexes!
-- major problem: these are only approximate!
-- Can't be used with Groebner bases!
-- BUT: can use NumericalAlgebraicGeometry to find solutions.
RR[x,y]
RR_200
CC[x,y]
x + ii*y

-----------------
-- Ideals -------
-----------------
R = ZZ/101[a..d]
I = ideal(a*d-b*c, b^2-a*c, c^2-b*d)
I_0
numgens I
for i from 0 to numgens I - 1 list I_i
I_*
netList I_*
dim I
codim I
degree I
hf = hilbertSeries I
reduceHilbert hf
betti res I
regularity I

I^2
J = intersect(I, ideal(a,b,c^3))
I == J
I*J
groebnerBasis I

----------------
-- Matrices ----
----------------
m = matrix{{a,b,c},{b,c,d}}
m_(0,0)
(transpose m) * m
numrows m
numcols m
source m
target m
minors(2, m)

----------------
-- Modules -----
----------------
R^1/I -- not R/I...!
coker m
image m
ker m
prune ker m
Ext^2(coker m, R)
Tor_2(coker m, coker vars R)
C = res coker m
C.dd
betti C
-- lot's more you can do...

---------------------------------------------
-- From/to lists, ideals matrices, modules --
---------------------------------------------
-- list to an ideal?
-- ideal to a list?
-- matrix to a list?
-- list(s) to a matrix?
-- ideal to a matrix?
-- matrix to an ideal?
-- generator matrix, relation matrix
I_*
ideal(a,b,c)
ideal{a,b,c}
presentation coker m

----------------------
-- Exercise  ---------
----------------------
-- A (pure) binomial in a ring R: (monomial) - (monomial)
-- (no extra coefficients), e.g. a^2*b*c - a*d^3
-- Create a function which takes 2 arguments:
--  1. # generators m
--  2. a list of monomials B
-- return an ideal generated by m pure binomials which are differences of monomials in B.
-- randoBinomials = (m, B) -> (
--   )
-- extra credit: check that all the elements of B are monomials all in the same ring.

-- example use:
  R = ZZ/101[a..d]
  B = flatten entries basis(3, R)
  randoBinomials(4, B)

-- some commands you might find useful here:
  random 7 -- gives random integer from 0 to 6
  tally for i from 0 to 10000 list random 7

  size (a^2-b*c+c^2) -- number of monomials
  ring B_0
  ring B_0 == ring B_1 -- not usable for rings!
  ring B_0 === ring B_1

-- exercise: Make another function which gives random monomials and random binomials.

--------------------
-- Exercise 2 ------
--------------------
-- Contest!

-- Investigate ideals generated by 5 quadrics (e.g. binomials) (in what ever number of variables you want).
-- 
-- What is the largest regularity of such ideals that you can find?
-- How many different Betti tables can you find?

-- Some possibly useful commands (here, L is a list of ideals_
  L/regularity
  L/(I -> betti res I)
  netList pack(4, M)


  

    
